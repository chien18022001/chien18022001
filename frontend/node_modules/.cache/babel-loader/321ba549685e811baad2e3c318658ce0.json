{"ast":null,"code":"import { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/cartReducers';\nimport { orderCreateReducer, orderDeleteReducer, orderDeliverReducer, orderDetailsReducer, orderListReducer, orderMineListReducer, orderPayReducer, orderSummaryReducer } from './reducers/orderReducers';\nimport { productCategoryListReducer, productCreateReducer, productDeleteReducer, productDetailsReducer, productListReducer, productReviewCreateReducer, productUpdateReducer } from './reducers/productReducers';\nimport { userAddressMapReducer, userDeleteReducer, userDetailsReducer, userListReducer, userRegisterReducer, userSigninReducer, userTopSellerListReducer, userUpdateProfileReducer, userUpdateReducer } from './reducers/userReducers';\nconst initialState = {\n  // userSignin: {\n  //   userInfo: localStorage.getItem('userInfo')\n  //     ? JSON.parse(localStorage.getItem('userInfo'))\n  //     : null,\n  // },\n  cart: {\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [],\n    shippingAddress: localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {},\n    paymentMethod: 'PayPal'\n  }\n};\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userSignin: userSigninReducer,\n  userRegister: userRegisterReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderMineList: orderMineListReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userUpdate: userUpdateReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productDelete: productDeleteReducer,\n  orderList: orderListReducer,\n  orderDelete: orderDeleteReducer,\n  orderUpdate: orderUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userTopSellersList: userTopSellerListReducer,\n  productCategoryList: productCategoryListReducer,\n  productReviewCreate: productReviewCreateReducer,\n  userAddressMap: userAddressMapReducer,\n  orderSummary: orderSummaryReducer\n}); // kiểm tra sự tồn tại của Redux Dev Tools và add nó vào phục vụ quá trình debug\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // khởi tạo store sử dụng API của Redux, ở đây có sử dụng thêm redux-thunk để đơn giản hoá việc xử lý HTTP API\n\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\nexport default store; // register:  userrouter, useraction , loaddingbox, userconstans, registerScreen ,signinScreen \n//import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { register } from '../actions/userActions';\n// import LoadingBox from '../components/LoadingBox';\n// import MessageBox from '../components/MessageBox';\n// import { createProduct } from '../actions/productActions';\n// export default function RegisterScreen(props) {\n//     const [name, setName] = useState('');\n//     const [price, setPrice] = useState('');\n//     const [image, setImage] = useState('');\n//     const [category, setCategory] = useState('');\n//     const [countInStock, setCountInStock] = useState('');\n//     const [brand, setBrand] = useState('');\n//     const [description, setDescription] = useState('');\n// //   const redirect = props.location.search\n// //     ? props.location.search.split('=')[1]\n// //     : '/';\n//   const productCreate = useSelector((state) => state.productCreate);\n//   const {  loading, error } = productCreate;\n//   const dispatch = useDispatch();\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     // TODO: dispatch update product\n//     dispatch(\n//       createProduct({\n//         // _id: productId,\n//         name,\n//         price,\n//         image,\n//         category,\n//         brand,\n//         countInStock,\n//         description,\n//       })\n//     );\n//   };\n//   useEffect(() => {\n//     // if (userInfo) {\n//     //   props.history.push(`/productlist`);\n//     // }\n//   }, [props.history,]);\n//   return (\n//     <div>\n//       <form className=\"form\" onSubmit={submitHandler}>\n//         <div>\n//           <h1>Edit Product </h1>\n//         </div>\n//         {/* {loadingUpdate && <LoadingBox></LoadingBox>}\n//         {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>} */}\n//         {loading ? (\n//           <LoadingBox></LoadingBox>\n//         ) : error ? (\n//           <MessageBox variant=\"danger\">{error}</MessageBox>\n//         ) : (\n//           <>\n//             <div>\n//               <label htmlFor=\"name\">Name</label>\n//               <input\n//                 id=\"name\"\n//                 type=\"text\"\n//                 placeholder=\"Enter name\"\n//                 // value={name}\n//                 onChange={(e) => setName(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"price\">Price</label>\n//               <input\n//                 id=\"price\"\n//                 type=\"text\"\n//                 placeholder=\"Enter price\"\n//                 // value={price}\n//                 onChange={(e) => setPrice(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"image\">Image</label>\n//               <input\n//                 id=\"image\"\n//                 type=\"text\"\n//                 placeholder=\"Enter image\"\n//                 // value={image}\n//                 onChange={(e) => setImage(e.target.value)}\n//               ></input>\n//             </div>\n//             {/* <div>\n//               <label htmlFor=\"imageFile\">Image File</label>\n//               <input\n//                 type=\"file\"\n//                 id=\"imageFile\"\n//                 label=\"Choose Image\"\n//                 onChange={uploadFileHandler}\n//               ></input>\n//               {loadingUpload && <LoadingBox></LoadingBox>}\n//               {errorUpload && (\n//                 <MessageBox variant=\"danger\">{errorUpload}</MessageBox>\n//               )}\n//             </div> */}\n//             <div>\n//               <label htmlFor=\"category\">Category</label>\n//               <input\n//                 id=\"category\"\n//                 type=\"text\"\n//                 placeholder=\"Enter category\"\n//                 value={category}\n//                 onChange={(e) => setCategory(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"brand\">Brand</label>\n//               <input\n//                 id=\"brand\"\n//                 type=\"text\"\n//                 placeholder=\"Enter brand\"\n//                 value={brand}\n//                 onChange={(e) => setBrand(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"countInStock\">Count In Stock</label>\n//               <input\n//                 id=\"countInStock\"\n//                 type=\"text\"\n//                 placeholder=\"Enter countInStock\"\n//                 value={countInStock}\n//                 onChange={(e) => setCountInStock(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"description\">Description</label>\n//               <textarea\n//                 id=\"description\"\n//                 rows=\"3\"\n//                 type=\"text\"\n//                 placeholder=\"Enter description\"\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//               ></textarea>\n//             </div>\n//             <div>\n//               <label></label>\n//               <button className=\"primary\" type=\"submit\">\n//                 Update\n//               </button>\n//             </div>\n//           </>\n//         )}\n//       </form>\n//     </div>\n//   );\n// }\n// router \n// import express from 'express';\n// import expressAsyncHandler from 'express-async-handler';\n// import data from '../data.js';\n// import Product from '../models/productModel.js';\n// import User from '../models/userModel.js';\n// import { isAdmin, isAuth, isSellerOrAdmin } from '../utils.js';\n// const productRouter = express.Router();\n// productRouter.get(\n//   '/',\n//   expressAsyncHandler(async (req, res) => {\n//     const pageSize = 3;\n//     const page = Number(req.query.pageNumber) || 1;\n//     const name = req.query.name || '';\n//     const category = req.query.category || '';\n//     const seller = req.query.seller || '';\n//     const order = req.query.order || '';\n//     const min =\n//       req.query.min && Number(req.query.min) !== 0 ? Number(req.query.min) : 0;\n//     const max =\n//       req.query.max && Number(req.query.max) !== 0 ? Number(req.query.max) : 0;\n//     const rating =\n//       req.query.rating && Number(req.query.rating) !== 0\n//         ? Number(req.query.rating)\n//         : 0;\n//     const nameFilter = name ? { name: { $regex: name, $options: 'i' } } : {};\n//     const sellerFilter = seller ? { seller } : {};\n//     const categoryFilter = category ? { category } : {};\n//     const priceFilter = min && max ? { price: { $gte: min, $lte: max } } : {};\n//     const ratingFilter = rating ? { rating: { $gte: rating } } : {};\n//     const sortOrder =\n//       order === 'lowest'\n//         ? { price: 1 }\n//         : order === 'highest'\n//         ? { price: -1 }\n//         : order === 'toprated'\n//         ? { rating: -1 }\n//         : { _id: -1 };\n//     const count = await Product.count({\n//       ...sellerFilter,\n//       ...nameFilter,\n//       ...categoryFilter,\n//       ...priceFilter,\n//       ...ratingFilter,\n//     });\n//     const products = await Product.find({\n//       ...sellerFilter,\n//       ...nameFilter,\n//       ...categoryFilter,\n//       ...priceFilter,\n//       ...ratingFilter,\n//     })\n//       .populate('seller', 'seller.name seller.logo')\n//       .sort(sortOrder)\n//       .skip(pageSize * (page - 1))\n//       .limit(pageSize);\n//     res.send({ products, page, pages: Math.ceil(count / pageSize) });\n//   })\n// );\n// productRouter.get(\n//   '/categories',\n//   expressAsyncHandler(async (req, res) => {\n//     const categories = await Product.find().distinct('category');\n//     res.send(categories);\n//   })\n// );\n// productRouter.get(\n//   '/seed',\n//   expressAsyncHandler(async (req, res) => {\n//     // await Product.remove({});\n//     const seller = await User.findOne({ isSeller: true });\n//     if (seller) {\n//       const products = data.products.map((product) => ({\n//         ...product,\n//         seller: seller._id,\n//       }));\n//       const createdProducts = await Product.insertMany(products);\n//       res.send({ createdProducts });\n//     } else {\n//       res\n//         .status(500)\n//         .send({ message: 'No seller found. first run /api/users/seed' });\n//     }\n//   })\n// );\n// productRouter.get(\n//   '/:id',\n//   expressAsyncHandler(async (req, res) => {\n//     const product = await Product.findById(req.params.id).populate(\n//       'seller',\n//       'seller.name seller.logo seller.rating seller.numReviews'\n//     );\n//     if (product) {\n//       res.send(product);\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n// productRouter.post(\n//   '/productcreate',\n//   isAuth,\n//   isSellerOrAdmin,\n//   expressAsyncHandler(async (req, res) => {\n//     const product = new Product({\n//       name:  req.body.name,\n//       seller: req.user._id,\n//       image: req.body.image,\n//       price: req.body.price,\n//       category: req.body.category,\n//       brand: req.body.brand,\n//       countInStock: req.body.countInStock,\n//       // rating: req.body.rating,\n//       numReviews: req.body.numReviews,\n//       description: req.body.description,\n//     });\n//     const createdProduct = await product.save();\n//     res.send({name: createdProduct.name,\n//       seller: createdProduct.seller,\n//       image: createdProduct.image,\n//       price: createdProduct.price,\n//       category: createdProduct.category,\n//       brand: createdProduct.brand,\n//       countInStock: createdProduct.countInStock ,\n//       // rating: createdProduct.rating,\n//       numReviews: createdProduct.numReviews,\n//       description: createdProduct.description});\n//   })\n// );\n// productRouter.put(\n//   '/:id',\n//   isAuth,\n//   isSellerOrAdmin,\n//   expressAsyncHandler(async (req, res) => {\n//     const productId = req.params.id;\n//     const product = await Product.findById(productId);\n//     if (product) {\n//       product.name = req.body.name;\n//       product.price = req.body.price;\n//       product.image = req.body.image;\n//       product.category = req.body.category;\n//       product.brand = req.body.brand;\n//       product.countInStock = req.body.countInStock;\n//       product.description = req.body.description;\n//       const updatedProduct = await product.save();\n//       res.send({ message: 'Product Updated', product: updatedProduct });\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n// productRouter.delete(\n//   '/:id',\n//   isAuth,\n//   isAdmin,\n//   expressAsyncHandler(async (req, res) => {\n//     const product = await Product.findById(req.params.id);\n//     if (product) {\n//       const deleteProduct = await product.remove();\n//       res.send({ message: 'Product Deleted', product: deleteProduct });\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n// productRouter.post(\n//   '/:id/reviews',\n//   isAuth,\n//   expressAsyncHandler(async (req, res) => {\n//     const productId = req.params.id;\n//     const product = await Product.findById(productId);\n//     if (product) {\n//       if (product.reviews.find((x) => x.name === req.user.name)) {\n//         return res\n//           .status(400)\n//           .send({ message: 'You already submitted a review' });\n//       }\n//       const review = {\n//         name: req.user.name,\n//         rating: Number(req.body.rating),\n//         comment: req.body.comment,\n//       };\n//       product.reviews.push(review);\n//       product.numReviews = product.reviews.length;\n//       product.rating =\n//         product.reviews.reduce((a, c) => c.rating + a, 0) /\n//         product.reviews.length;\n//       const updatedProduct = await product.save();\n//       res.status(201).send({\n//         message: 'Review Created',\n//         review: updatedProduct.reviews[updatedProduct.reviews.length - 1],\n//       });\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n// export default productRouter;\n// // actions\n// import Axios from 'axios';\n// import {\n//   PRODUCT_CREATE_FAIL,\n//   PRODUCT_CREATE_REQUEST,\n//   PRODUCT_CREATE_SUCCESS,\n//   PRODUCT_DETAILS_FAIL,\n//   PRODUCT_DETAILS_REQUEST,\n//   PRODUCT_DETAILS_SUCCESS,\n//   PRODUCT_LIST_FAIL,\n//   PRODUCT_LIST_REQUEST,\n//   PRODUCT_LIST_SUCCESS,\n//   PRODUCT_UPDATE_REQUEST,\n//   PRODUCT_UPDATE_SUCCESS,\n//   PRODUCT_UPDATE_FAIL,\n//   PRODUCT_DELETE_REQUEST,\n//   PRODUCT_DELETE_FAIL,\n//   PRODUCT_DELETE_SUCCESS,\n//   PRODUCT_CATEGORY_LIST_SUCCESS,\n//   PRODUCT_CATEGORY_LIST_REQUEST,\n//   PRODUCT_CATEGORY_LIST_FAIL,\n//   PRODUCT_REVIEW_CREATE_REQUEST,\n//   PRODUCT_REVIEW_CREATE_SUCCESS,\n//   PRODUCT_REVIEW_CREATE_FAIL,\n// } from '../constants/productConstants';\n// // danh sach san pham \n// export const listProducts = ({\n//   pageNumber = '',\n//   seller = '',\n//   name = '',\n//   category = '',\n//   order = '',\n//   min = 0,\n//   max = 0,\n//   rating = 0,\n// }) => async (dispatch) => {\n//   dispatch({\n//     type: PRODUCT_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(\n//       `/api/products?pageNumber=${pageNumber}&seller=${seller}&name=${name}&category=${category}&min=${min}&max=${max}&rating=${rating}&order=${order}`\n//     );\n//     dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n//   }\n// };\n// export const listProductCategories = () => async (dispatch) => {\n//   dispatch({\n//     type: PRODUCT_CATEGORY_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(`/api/products/categories`);\n//     dispatch({ type: PRODUCT_CATEGORY_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: PRODUCT_CATEGORY_LIST_FAIL, payload: error.message });\n//   }\n// };\n// export const detailsProduct = (productId) => async (dispatch) => {\n//   dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n//   try {\n//     const { data } = await Axios.get(`/api/products/${productId}`);\n//     dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({\n//       type: PRODUCT_DETAILS_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// };\n// export const createProduct = (name,\n//   seller,\n//   image,\n//   price,\n//   category,\n//   brand,\n//   countInStock,\n//   // rating,\n//   numReviews,\n//   description,) => async (dispatch,getState) => {\n//   dispatch({ type: PRODUCT_CREATE_REQUEST, });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = await Axios.post(\n//       '/api/products/productcreate',\n//       {name,\n//         seller,\n//         image,\n//         price,\n//         category,\n//         brand,\n//         countInStock,\n//         // rating,\n//         numReviews,\n//         description,},\n//       {\n//         headers: { Authorization: `Bearer ${userInfo.token}` },\n//       }\n//     );\n//     dispatch({\n//       type: PRODUCT_CREATE_SUCCESS,\n//       payload: data,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: PRODUCT_CREATE_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// };\n// export const updateProduct = (product) => async (dispatch, getState) => {\n//   dispatch({ type: PRODUCT_UPDATE_REQUEST, payload: product });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = await Axios.put(`/api/products/${product._id}`, product, {\n//       headers: { Authorization: `Bearer ${userInfo.token}` },\n//     });\n//     dispatch({ type: PRODUCT_UPDATE_SUCCESS, payload: data });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: PRODUCT_UPDATE_FAIL, error: message });\n//   }\n// };\n// export const deleteProduct = (productId) => async (dispatch, getState) => {\n//   dispatch({ type: PRODUCT_DELETE_REQUEST, payload: productId });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = Axios.delete(`/api/products/${productId}`, {\n//       headers: { Authorization: `Bearer ${userInfo.token}` },\n//     });\n//     dispatch({ type: PRODUCT_DELETE_SUCCESS });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: PRODUCT_DELETE_FAIL, payload: message });\n//   }\n// };\n// export const createReview = (productId, review) => async (\n//   dispatch,\n//   getState\n// ) => {\n//   dispatch({ type: PRODUCT_REVIEW_CREATE_REQUEST });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = await Axios.post(\n//       `/api/products/${productId}/reviews`,\n//       review,\n//       {\n//         headers: { Authorization: `Bearer ${userInfo.token}` },\n//       }\n//     );\n//     dispatch({\n//       type: PRODUCT_REVIEW_CREATE_SUCCESS,\n//       payload: data.review,\n//     });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: PRODUCT_REVIEW_CREATE_FAIL, payload: message });\n//   }\n// };\n// // screen\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { register } from '../actions/userActions';\n// import LoadingBox from '../components/LoadingBox';\n// import MessageBox from '../components/MessageBox';\n// import { createProduct } from '../actions/productActions';\n// export default function RegisterScreen(props) {\n//     const [name, setName] = useState('');\n//     const [price, setPrice] = useState('');\n//     const [image, setImage] = useState('');\n//     const [category, setCategory] = useState('');\n//     const [countInStock, setCountInStock] = useState('');\n//     const [brand, setBrand] = useState('');\n//     const [description, setDescription] = useState('');\n//   const redirect = props.location.search\n//     ? props.location.search.split('=')[1]\n//     : '/';\n//   const productCreate = useSelector((state) => state.productCreate);\n//   const { userInfo, loading, error } = productCreate;\n//   const dispatch = useDispatch();\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     // TODO: dispatch update product\n//     dispatch(\n//       createProduct({\n//         // _id: productId,\n//         name,\n//   // seller,\n//   image,\n//   price,\n//   category,\n//   brand,\n//   countInStock,\n//   // rating,\n//   // numReviews,\n//   description,\n//       })\n//     );\n//   };\n//   useEffect(() => {\n//     if (userInfo) {\n//       props.history.push(redirect);\n//     }\n//   }, [props.history,redirect, userInfo]);\n//   return (\n//     <div>\n//       <form className=\"form\" onSubmit={submitHandler}>\n//         <div>\n//           <h1>Edit Product </h1>\n//         </div>\n//         {/* {loadingUpdate && <LoadingBox></LoadingBox>}\n//         {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>} */}\n//         {loading ? (\n//           <LoadingBox></LoadingBox>\n//         ) : error ? (\n//           <MessageBox variant=\"danger\">{error}</MessageBox>\n//         ) : (\n//           <>\n//             <div>\n//               <label htmlFor=\"name\">Name</label>\n//               <input\n//                 id=\"name\"\n//                 type=\"text\"\n//                 placeholder=\"Enter name\"\n//                 // value={name}\n//                 onChange={(e) => setName(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"price\">Price</label>\n//               <input\n//                 id=\"price\"\n//                 type=\"text\"\n//                 placeholder=\"Enter price\"\n//                 // value={price}\n//                 onChange={(e) => setPrice(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"image\">Image</label>\n//               <input\n//                 id=\"image\"\n//                 type=\"text\"\n//                 placeholder=\"Enter image\"\n//                 // value={image}\n//                 onChange={(e) => setImage(e.target.value)}\n//               ></input>\n//             </div>\n//             {/* <div>\n//               <label htmlFor=\"imageFile\">Image File</label>\n//               <input\n//                 type=\"file\"\n//                 id=\"imageFile\"\n//                 label=\"Choose Image\"\n//                 onChange={uploadFileHandler}\n//               ></input>\n//               {loadingUpload && <LoadingBox></LoadingBox>}\n//               {errorUpload && (\n//                 <MessageBox variant=\"danger\">{errorUpload}</MessageBox>\n//               )}\n//             </div> */}\n//             <div>\n//               <label htmlFor=\"category\">Category</label>\n//               <input\n//                 id=\"category\"\n//                 type=\"text\"\n//                 placeholder=\"Enter category\"\n//                 value={category}\n//                 onChange={(e) => setCategory(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"brand\">Brand</label>\n//               <input\n//                 id=\"brand\"\n//                 type=\"text\"\n//                 placeholder=\"Enter brand\"\n//                 value={brand}\n//                 onChange={(e) => setBrand(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"countInStock\">Count In Stock</label>\n//               <input\n//                 id=\"countInStock\"\n//                 type=\"text\"\n//                 placeholder=\"Enter countInStock\"\n//                 value={countInStock}\n//                 onChange={(e) => setCountInStock(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"description\">Description</label>\n//               <textarea\n//                 id=\"description\"\n//                 rows=\"3\"\n//                 type=\"text\"\n//                 placeholder=\"Enter description\"\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//               ></textarea>\n//             </div>\n//             <div>\n//               <label></label>\n//               <button className=\"primary\" type=\"submit\">\n//                 Update\n//               </button>\n//             </div>\n//           </>\n//         )}\n//       </form>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["C:/Users/84925/Downloads/amazona-master/amazona-master/frontend/src/store.js"],"names":["createStore","compose","applyMiddleware","combineReducers","thunk","cartReducer","orderCreateReducer","orderDeleteReducer","orderDeliverReducer","orderDetailsReducer","orderListReducer","orderMineListReducer","orderPayReducer","orderSummaryReducer","productCategoryListReducer","productCreateReducer","productDeleteReducer","productDetailsReducer","productListReducer","productReviewCreateReducer","productUpdateReducer","userAddressMapReducer","userDeleteReducer","userDetailsReducer","userListReducer","userRegisterReducer","userSigninReducer","userTopSellerListReducer","userUpdateProfileReducer","userUpdateReducer","initialState","cart","cartItems","localStorage","getItem","JSON","parse","shippingAddress","paymentMethod","reducer","productList","productDetails","userSignin","userRegister","orderCreate","orderDetails","orderPay","orderMineList","userDetails","userUpdateProfile","userUpdate","productCreate","productUpdate","productDelete","orderList","orderDelete","orderUpdate","orderUpdateReducer","userList","userDelete","userTopSellersList","productCategoryList","productReviewCreate","userAddressMap","orderSummary","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,mBAHF,EAIEC,mBAJF,EAKEC,gBALF,EAMEC,oBANF,EAOEC,eAPF,EAQEC,mBARF,QASO,0BATP;AAUA,SACEC,0BADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,qBAJF,EAKEC,kBALF,EAMEC,0BANF,EAOEC,oBAPF,QAQO,4BARP;AASA,SACEC,qBADF,EAEEC,iBAFF,EAGEC,kBAHF,EAIEC,eAJF,EAKEC,mBALF,EAMEC,iBANF,EAOEC,wBAPF,EAQEC,wBARF,EASEC,iBATF,QAUO,yBAVP;AAYA,MAAMC,YAAY,GAAG;AACnB;AACA;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,GAEP,EAHA;AAIJG,IAAAA,eAAe,EAAEJ,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACbC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADa,GAEb,EANA;AAOJI,IAAAA,aAAa,EAAE;AAPX;AANa,CAArB;AAgBA,MAAMC,OAAO,GAAGpC,eAAe,CAAC;AAC9BqC,EAAAA,WAAW,EAAEtB,kBADiB;AAE9BuB,EAAAA,cAAc,EAAExB,qBAFc;AAG9Bc,EAAAA,IAAI,EAAE1B,WAHwB;AAI9BqC,EAAAA,UAAU,EAAEhB,iBAJkB;AAK9BiB,EAAAA,YAAY,EAAElB,mBALgB;AAM9BmB,EAAAA,WAAW,EAAEtC,kBANiB;AAO9BuC,EAAAA,YAAY,EAAEpC,mBAPgB;AAQ9BqC,EAAAA,QAAQ,EAAElC,eARoB;AAS9BmC,EAAAA,aAAa,EAAEpC,oBATe;AAU9BqC,EAAAA,WAAW,EAAEzB,kBAViB;AAW9B0B,EAAAA,iBAAiB,EAAErB,wBAXW;AAY9BsB,EAAAA,UAAU,EAAErB,iBAZkB;AAa9BsB,EAAAA,aAAa,EAAEpC,oBAbe;AAc9BqC,EAAAA,aAAa,EAAEhC,oBAde;AAe9BiC,EAAAA,aAAa,EAAErC,oBAfe;AAgB9BsC,EAAAA,SAAS,EAAE5C,gBAhBmB;AAiB9B6C,EAAAA,WAAW,EAAEhD,kBAjBiB;AAkB9BiD,EAAAA,WAAW,EAAEC,kBAlBiB;AAmB9BC,EAAAA,QAAQ,EAAElC,eAnBoB;AAoB9BmC,EAAAA,UAAU,EAAErC,iBApBkB;AAqB9BsC,EAAAA,kBAAkB,EAAEjC,wBArBU;AAsB9BkC,EAAAA,mBAAmB,EAAE/C,0BAtBS;AAuB9BgD,EAAAA,mBAAmB,EAAE3C,0BAvBS;AAwB9B4C,EAAAA,cAAc,EAAE1C,qBAxBc;AAyB9B2C,EAAAA,YAAY,EAAEnD;AAzBgB,CAAD,CAA/B,C,CA2BA;;AACA,MAAMoD,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+ClE,OAAvE,C,CACA;;AACA,MAAMmE,KAAK,GAAGpE,WAAW,CACvBuC,OADuB,EAEvBT,YAFuB,EAGvBmC,eAAe,CAAC/D,eAAe,CAACE,KAAD,CAAhB,CAHQ,CAAzB;AAMA,eAAegE,KAAfsourcesContent":["import { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/cartReducers';\nimport {\n  orderCreateReducer,\n  orderDeleteReducer,\n  orderDeliverReducer,\n  orderDetailsReducer,\n  orderListReducer,\n  orderMineListReducer,\n  orderPayReducer,\n  orderSummaryReducer,\n} from './reducers/orderReducers';\nimport {\n  productCategoryListReducer,\n  productCreateReducer,\n  productDeleteReducer,\n  productDetailsReducer,\n  productListReducer,\n  productReviewCreateReducer,\n  productUpdateReducer,\n} from './reducers/productReducers';\nimport {\n  userAddressMapReducer,\n  userDeleteReducer,\n  userDetailsReducer,\n  userListReducer,\n  userRegisterReducer,\n  userSigninReducer,\n  userTopSellerListReducer,\n  userUpdateProfileReducer,\n  userUpdateReducer,\n} from './reducers/userReducers';\n\nconst initialState = {\n  // userSignin: {\n  //   userInfo: localStorage.getItem('userInfo')\n  //     ? JSON.parse(localStorage.getItem('userInfo'))\n  //     : null,\n  // },\n  cart: {\n    cartItems: localStorage.getItem('cartItems')\n      ? JSON.parse(localStorage.getItem('cartItems'))\n      : [],\n    shippingAddress: localStorage.getItem('shippingAddress')\n      ? JSON.parse(localStorage.getItem('shippingAddress'))\n      : {},\n    paymentMethod: 'PayPal',\n  },\n};\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userSignin: userSigninReducer,\n  userRegister: userRegisterReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderMineList: orderMineListReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userUpdate: userUpdateReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productDelete: productDeleteReducer,\n  orderList: orderListReducer,\n  orderDelete: orderDeleteReducer,\n  orderUpdate: orderUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userTopSellersList: userTopSellerListReducer,\n  productCategoryList: productCategoryListReducer,\n  productReviewCreate: productReviewCreateReducer,\n  userAddressMap: userAddressMapReducer,\n  orderSummary: orderSummaryReducer,\n});\n// kiểm tra sự tồn tại của Redux Dev Tools và add nó vào phục vụ quá trình debug\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// khởi tạo store sử dụng API của Redux, ở đây có sử dụng thêm redux-thunk để đơn giản hoá việc xử lý HTTP API\nconst store = createStore(\n  reducer,\n  initialState,\n  composeEnhancer(applyMiddleware(thunk))\n);\n\nexport default store;\n\n\n\n\n// register:  userrouter, useraction , loaddingbox, userconstans, registerScreen ,signinScreen \n//import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { register } from '../actions/userActions';\n// import LoadingBox from '../components/LoadingBox';\n// import MessageBox from '../components/MessageBox';\n// import { createProduct } from '../actions/productActions';\n\n\n\n// export default function RegisterScreen(props) {\n//     const [name, setName] = useState('');\n//     const [price, setPrice] = useState('');\n//     const [image, setImage] = useState('');\n//     const [category, setCategory] = useState('');\n//     const [countInStock, setCountInStock] = useState('');\n//     const [brand, setBrand] = useState('');\n//     const [description, setDescription] = useState('');\n\n// //   const redirect = props.location.search\n// //     ? props.location.search.split('=')[1]\n// //     : '/';\n\n//   const productCreate = useSelector((state) => state.productCreate);\n//   const {  loading, error } = productCreate;\n\n//   const dispatch = useDispatch();\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     // TODO: dispatch update product\n//     dispatch(\n//       createProduct({\n//         // _id: productId,\n//         name,\n//         price,\n//         image,\n//         category,\n//         brand,\n//         countInStock,\n//         description,\n//       })\n//     );\n//   };\n//   useEffect(() => {\n//     // if (userInfo) {\n//     //   props.history.push(`/productlist`);\n//     // }\n//   }, [props.history,]);\n//   return (\n//     <div>\n//       <form className=\"form\" onSubmit={submitHandler}>\n//         <div>\n//           <h1>Edit Product </h1>\n//         </div>\n//         {/* {loadingUpdate && <LoadingBox></LoadingBox>}\n//         {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>} */}\n//         {loading ? (\n//           <LoadingBox></LoadingBox>\n//         ) : error ? (\n//           <MessageBox variant=\"danger\">{error}</MessageBox>\n//         ) : (\n//           <>\n//             <div>\n//               <label htmlFor=\"name\">Name</label>\n//               <input\n//                 id=\"name\"\n//                 type=\"text\"\n//                 placeholder=\"Enter name\"\n//                 // value={name}\n//                 onChange={(e) => setName(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"price\">Price</label>\n//               <input\n//                 id=\"price\"\n//                 type=\"text\"\n//                 placeholder=\"Enter price\"\n//                 // value={price}\n//                 onChange={(e) => setPrice(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"image\">Image</label>\n//               <input\n//                 id=\"image\"\n//                 type=\"text\"\n//                 placeholder=\"Enter image\"\n//                 // value={image}\n//                 onChange={(e) => setImage(e.target.value)}\n//               ></input>\n//             </div>\n//             {/* <div>\n//               <label htmlFor=\"imageFile\">Image File</label>\n//               <input\n//                 type=\"file\"\n//                 id=\"imageFile\"\n//                 label=\"Choose Image\"\n//                 onChange={uploadFileHandler}\n//               ></input>\n//               {loadingUpload && <LoadingBox></LoadingBox>}\n//               {errorUpload && (\n//                 <MessageBox variant=\"danger\">{errorUpload}</MessageBox>\n//               )}\n//             </div> */}\n//             <div>\n//               <label htmlFor=\"category\">Category</label>\n//               <input\n//                 id=\"category\"\n//                 type=\"text\"\n//                 placeholder=\"Enter category\"\n//                 value={category}\n//                 onChange={(e) => setCategory(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"brand\">Brand</label>\n//               <input\n//                 id=\"brand\"\n//                 type=\"text\"\n//                 placeholder=\"Enter brand\"\n//                 value={brand}\n//                 onChange={(e) => setBrand(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"countInStock\">Count In Stock</label>\n//               <input\n//                 id=\"countInStock\"\n//                 type=\"text\"\n//                 placeholder=\"Enter countInStock\"\n//                 value={countInStock}\n//                 onChange={(e) => setCountInStock(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"description\">Description</label>\n//               <textarea\n//                 id=\"description\"\n//                 rows=\"3\"\n//                 type=\"text\"\n//                 placeholder=\"Enter description\"\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//               ></textarea>\n//             </div>\n//             <div>\n//               <label></label>\n//               <button className=\"primary\" type=\"submit\">\n//                 Update\n//               </button>\n//             </div>\n//           </>\n//         )}\n//       </form>\n//     </div>\n//   );\n// }\n\n\n\n// router \n// import express from 'express';\n// import expressAsyncHandler from 'express-async-handler';\n// import data from '../data.js';\n// import Product from '../models/productModel.js';\n// import User from '../models/userModel.js';\n// import { isAdmin, isAuth, isSellerOrAdmin } from '../utils.js';\n\n// const productRouter = express.Router();\n\n// productRouter.get(\n//   '/',\n//   expressAsyncHandler(async (req, res) => {\n//     const pageSize = 3;\n//     const page = Number(req.query.pageNumber) || 1;\n//     const name = req.query.name || '';\n//     const category = req.query.category || '';\n//     const seller = req.query.seller || '';\n//     const order = req.query.order || '';\n//     const min =\n//       req.query.min && Number(req.query.min) !== 0 ? Number(req.query.min) : 0;\n//     const max =\n//       req.query.max && Number(req.query.max) !== 0 ? Number(req.query.max) : 0;\n//     const rating =\n//       req.query.rating && Number(req.query.rating) !== 0\n//         ? Number(req.query.rating)\n//         : 0;\n\n//     const nameFilter = name ? { name: { $regex: name, $options: 'i' } } : {};\n//     const sellerFilter = seller ? { seller } : {};\n//     const categoryFilter = category ? { category } : {};\n//     const priceFilter = min && max ? { price: { $gte: min, $lte: max } } : {};\n//     const ratingFilter = rating ? { rating: { $gte: rating } } : {};\n//     const sortOrder =\n//       order === 'lowest'\n//         ? { price: 1 }\n//         : order === 'highest'\n//         ? { price: -1 }\n//         : order === 'toprated'\n//         ? { rating: -1 }\n//         : { _id: -1 };\n//     const count = await Product.count({\n//       ...sellerFilter,\n//       ...nameFilter,\n//       ...categoryFilter,\n//       ...priceFilter,\n//       ...ratingFilter,\n//     });\n//     const products = await Product.find({\n//       ...sellerFilter,\n//       ...nameFilter,\n//       ...categoryFilter,\n//       ...priceFilter,\n//       ...ratingFilter,\n//     })\n//       .populate('seller', 'seller.name seller.logo')\n//       .sort(sortOrder)\n//       .skip(pageSize * (page - 1))\n//       .limit(pageSize);\n//     res.send({ products, page, pages: Math.ceil(count / pageSize) });\n//   })\n// );\n\n// productRouter.get(\n//   '/categories',\n//   expressAsyncHandler(async (req, res) => {\n//     const categories = await Product.find().distinct('category');\n//     res.send(categories);\n//   })\n// );\n\n// productRouter.get(\n//   '/seed',\n//   expressAsyncHandler(async (req, res) => {\n//     // await Product.remove({});\n//     const seller = await User.findOne({ isSeller: true });\n//     if (seller) {\n//       const products = data.products.map((product) => ({\n//         ...product,\n//         seller: seller._id,\n//       }));\n//       const createdProducts = await Product.insertMany(products);\n//       res.send({ createdProducts });\n//     } else {\n//       res\n//         .status(500)\n//         .send({ message: 'No seller found. first run /api/users/seed' });\n//     }\n//   })\n// );\n\n// productRouter.get(\n//   '/:id',\n//   expressAsyncHandler(async (req, res) => {\n//     const product = await Product.findById(req.params.id).populate(\n//       'seller',\n//       'seller.name seller.logo seller.rating seller.numReviews'\n//     );\n//     if (product) {\n//       res.send(product);\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n\n// productRouter.post(\n//   '/productcreate',\n//   isAuth,\n//   isSellerOrAdmin,\n//   expressAsyncHandler(async (req, res) => {\n//     const product = new Product({\n//       name:  req.body.name,\n//       seller: req.user._id,\n//       image: req.body.image,\n//       price: req.body.price,\n//       category: req.body.category,\n//       brand: req.body.brand,\n//       countInStock: req.body.countInStock,\n//       // rating: req.body.rating,\n//       numReviews: req.body.numReviews,\n//       description: req.body.description,\n//     });\n//     const createdProduct = await product.save();\n//     res.send({name: createdProduct.name,\n//       seller: createdProduct.seller,\n//       image: createdProduct.image,\n//       price: createdProduct.price,\n//       category: createdProduct.category,\n//       brand: createdProduct.brand,\n//       countInStock: createdProduct.countInStock ,\n//       // rating: createdProduct.rating,\n//       numReviews: createdProduct.numReviews,\n//       description: createdProduct.description});\n//   })\n// );\n// productRouter.put(\n//   '/:id',\n//   isAuth,\n//   isSellerOrAdmin,\n//   expressAsyncHandler(async (req, res) => {\n//     const productId = req.params.id;\n//     const product = await Product.findById(productId);\n//     if (product) {\n//       product.name = req.body.name;\n//       product.price = req.body.price;\n//       product.image = req.body.image;\n//       product.category = req.body.category;\n//       product.brand = req.body.brand;\n//       product.countInStock = req.body.countInStock;\n//       product.description = req.body.description;\n//       const updatedProduct = await product.save();\n//       res.send({ message: 'Product Updated', product: updatedProduct });\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n\n// productRouter.delete(\n//   '/:id',\n//   isAuth,\n//   isAdmin,\n//   expressAsyncHandler(async (req, res) => {\n//     const product = await Product.findById(req.params.id);\n//     if (product) {\n//       const deleteProduct = await product.remove();\n//       res.send({ message: 'Product Deleted', product: deleteProduct });\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n\n// productRouter.post(\n//   '/:id/reviews',\n//   isAuth,\n//   expressAsyncHandler(async (req, res) => {\n//     const productId = req.params.id;\n//     const product = await Product.findById(productId);\n//     if (product) {\n//       if (product.reviews.find((x) => x.name === req.user.name)) {\n//         return res\n//           .status(400)\n//           .send({ message: 'You already submitted a review' });\n//       }\n//       const review = {\n//         name: req.user.name,\n//         rating: Number(req.body.rating),\n//         comment: req.body.comment,\n//       };\n//       product.reviews.push(review);\n//       product.numReviews = product.reviews.length;\n//       product.rating =\n//         product.reviews.reduce((a, c) => c.rating + a, 0) /\n//         product.reviews.length;\n//       const updatedProduct = await product.save();\n//       res.status(201).send({\n//         message: 'Review Created',\n//         review: updatedProduct.reviews[updatedProduct.reviews.length - 1],\n//       });\n//     } else {\n//       res.status(404).send({ message: 'Product Not Found' });\n//     }\n//   })\n// );\n\n// export default productRouter;\n\n\n\n\n// // actions\n// import Axios from 'axios';\n// import {\n//   PRODUCT_CREATE_FAIL,\n//   PRODUCT_CREATE_REQUEST,\n//   PRODUCT_CREATE_SUCCESS,\n//   PRODUCT_DETAILS_FAIL,\n//   PRODUCT_DETAILS_REQUEST,\n//   PRODUCT_DETAILS_SUCCESS,\n//   PRODUCT_LIST_FAIL,\n//   PRODUCT_LIST_REQUEST,\n//   PRODUCT_LIST_SUCCESS,\n//   PRODUCT_UPDATE_REQUEST,\n//   PRODUCT_UPDATE_SUCCESS,\n//   PRODUCT_UPDATE_FAIL,\n//   PRODUCT_DELETE_REQUEST,\n//   PRODUCT_DELETE_FAIL,\n//   PRODUCT_DELETE_SUCCESS,\n//   PRODUCT_CATEGORY_LIST_SUCCESS,\n//   PRODUCT_CATEGORY_LIST_REQUEST,\n//   PRODUCT_CATEGORY_LIST_FAIL,\n//   PRODUCT_REVIEW_CREATE_REQUEST,\n//   PRODUCT_REVIEW_CREATE_SUCCESS,\n//   PRODUCT_REVIEW_CREATE_FAIL,\n// } from '../constants/productConstants';\n\n// // danh sach san pham \n// export const listProducts = ({\n//   pageNumber = '',\n//   seller = '',\n//   name = '',\n//   category = '',\n//   order = '',\n//   min = 0,\n//   max = 0,\n//   rating = 0,\n// }) => async (dispatch) => {\n//   dispatch({\n//     type: PRODUCT_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(\n//       `/api/products?pageNumber=${pageNumber}&seller=${seller}&name=${name}&category=${category}&min=${min}&max=${max}&rating=${rating}&order=${order}`\n//     );\n//     dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n//   }\n// };\n\n// export const listProductCategories = () => async (dispatch) => {\n//   dispatch({\n//     type: PRODUCT_CATEGORY_LIST_REQUEST,\n//   });\n//   try {\n//     const { data } = await Axios.get(`/api/products/categories`);\n//     dispatch({ type: PRODUCT_CATEGORY_LIST_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({ type: PRODUCT_CATEGORY_LIST_FAIL, payload: error.message });\n//   }\n// };\n\n// export const detailsProduct = (productId) => async (dispatch) => {\n//   dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n//   try {\n//     const { data } = await Axios.get(`/api/products/${productId}`);\n//     dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n//   } catch (error) {\n//     dispatch({\n//       type: PRODUCT_DETAILS_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// };\n// export const createProduct = (name,\n//   seller,\n//   image,\n//   price,\n//   category,\n//   brand,\n//   countInStock,\n//   // rating,\n//   numReviews,\n//   description,) => async (dispatch,getState) => {\n//   dispatch({ type: PRODUCT_CREATE_REQUEST, });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = await Axios.post(\n//       '/api/products/productcreate',\n//       {name,\n//         seller,\n//         image,\n//         price,\n//         category,\n//         brand,\n//         countInStock,\n//         // rating,\n//         numReviews,\n//         description,},\n//       {\n//         headers: { Authorization: `Bearer ${userInfo.token}` },\n//       }\n//     );\n//     dispatch({\n//       type: PRODUCT_CREATE_SUCCESS,\n//       payload: data,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: PRODUCT_CREATE_FAIL,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// };\n// export const updateProduct = (product) => async (dispatch, getState) => {\n//   dispatch({ type: PRODUCT_UPDATE_REQUEST, payload: product });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = await Axios.put(`/api/products/${product._id}`, product, {\n//       headers: { Authorization: `Bearer ${userInfo.token}` },\n//     });\n//     dispatch({ type: PRODUCT_UPDATE_SUCCESS, payload: data });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: PRODUCT_UPDATE_FAIL, error: message });\n//   }\n// };\n// export const deleteProduct = (productId) => async (dispatch, getState) => {\n//   dispatch({ type: PRODUCT_DELETE_REQUEST, payload: productId });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = Axios.delete(`/api/products/${productId}`, {\n//       headers: { Authorization: `Bearer ${userInfo.token}` },\n//     });\n//     dispatch({ type: PRODUCT_DELETE_SUCCESS });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: PRODUCT_DELETE_FAIL, payload: message });\n//   }\n// };\n// export const createReview = (productId, review) => async (\n//   dispatch,\n//   getState\n// ) => {\n//   dispatch({ type: PRODUCT_REVIEW_CREATE_REQUEST });\n//   const {\n//     userSignin: { userInfo },\n//   } = getState();\n//   try {\n//     const { data } = await Axios.post(\n//       `/api/products/${productId}/reviews`,\n//       review,\n//       {\n//         headers: { Authorization: `Bearer ${userInfo.token}` },\n//       }\n//     );\n//     dispatch({\n//       type: PRODUCT_REVIEW_CREATE_SUCCESS,\n//       payload: data.review,\n//     });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: PRODUCT_REVIEW_CREATE_FAIL, payload: message });\n//   }\n// };\n\n\n\n// // screen\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { register } from '../actions/userActions';\n// import LoadingBox from '../components/LoadingBox';\n// import MessageBox from '../components/MessageBox';\n// import { createProduct } from '../actions/productActions';\n\n\n\n// export default function RegisterScreen(props) {\n//     const [name, setName] = useState('');\n//     const [price, setPrice] = useState('');\n//     const [image, setImage] = useState('');\n//     const [category, setCategory] = useState('');\n//     const [countInStock, setCountInStock] = useState('');\n//     const [brand, setBrand] = useState('');\n//     const [description, setDescription] = useState('');\n\n//   const redirect = props.location.search\n//     ? props.location.search.split('=')[1]\n//     : '/';\n\n//   const productCreate = useSelector((state) => state.productCreate);\n//   const { userInfo, loading, error } = productCreate;\n\n//   const dispatch = useDispatch();\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     // TODO: dispatch update product\n//     dispatch(\n//       createProduct({\n//         // _id: productId,\n//         name,\n//   // seller,\n//   image,\n//   price,\n//   category,\n//   brand,\n//   countInStock,\n//   // rating,\n//   // numReviews,\n//   description,\n//       })\n//     );\n//   };\n//   useEffect(() => {\n//     if (userInfo) {\n//       props.history.push(redirect);\n//     }\n//   }, [props.history,redirect, userInfo]);\n//   return (\n//     <div>\n//       <form className=\"form\" onSubmit={submitHandler}>\n//         <div>\n//           <h1>Edit Product </h1>\n//         </div>\n//         {/* {loadingUpdate && <LoadingBox></LoadingBox>}\n//         {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>} */}\n//         {loading ? (\n//           <LoadingBox></LoadingBox>\n//         ) : error ? (\n//           <MessageBox variant=\"danger\">{error}</MessageBox>\n//         ) : (\n//           <>\n//             <div>\n//               <label htmlFor=\"name\">Name</label>\n//               <input\n//                 id=\"name\"\n//                 type=\"text\"\n//                 placeholder=\"Enter name\"\n//                 // value={name}\n//                 onChange={(e) => setName(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"price\">Price</label>\n//               <input\n//                 id=\"price\"\n//                 type=\"text\"\n//                 placeholder=\"Enter price\"\n//                 // value={price}\n//                 onChange={(e) => setPrice(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"image\">Image</label>\n//               <input\n//                 id=\"image\"\n//                 type=\"text\"\n//                 placeholder=\"Enter image\"\n//                 // value={image}\n//                 onChange={(e) => setImage(e.target.value)}\n//               ></input>\n//             </div>\n//             {/* <div>\n//               <label htmlFor=\"imageFile\">Image File</label>\n//               <input\n//                 type=\"file\"\n//                 id=\"imageFile\"\n//                 label=\"Choose Image\"\n//                 onChange={uploadFileHandler}\n//               ></input>\n//               {loadingUpload && <LoadingBox></LoadingBox>}\n//               {errorUpload && (\n//                 <MessageBox variant=\"danger\">{errorUpload}</MessageBox>\n//               )}\n//             </div> */}\n//             <div>\n//               <label htmlFor=\"category\">Category</label>\n//               <input\n//                 id=\"category\"\n//                 type=\"text\"\n//                 placeholder=\"Enter category\"\n//                 value={category}\n//                 onChange={(e) => setCategory(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"brand\">Brand</label>\n//               <input\n//                 id=\"brand\"\n//                 type=\"text\"\n//                 placeholder=\"Enter brand\"\n//                 value={brand}\n//                 onChange={(e) => setBrand(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"countInStock\">Count In Stock</label>\n//               <input\n//                 id=\"countInStock\"\n//                 type=\"text\"\n//                 placeholder=\"Enter countInStock\"\n//                 value={countInStock}\n//                 onChange={(e) => setCountInStock(e.target.value)}\n//               ></input>\n//             </div>\n//             <div>\n//               <label htmlFor=\"description\">Description</label>\n//               <textarea\n//                 id=\"description\"\n//                 rows=\"3\"\n//                 type=\"text\"\n//                 placeholder=\"Enter description\"\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//               ></textarea>\n//             </div>\n//             <div>\n//               <label></label>\n//               <button className=\"primary\" type=\"submit\">\n//                 Update\n//               </button>\n//             </div>\n//           </>\n//         )}\n//       </form>\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}