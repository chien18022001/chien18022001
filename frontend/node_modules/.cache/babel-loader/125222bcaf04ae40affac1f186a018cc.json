{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n// import socketIOClient from 'socket.io-client';\n// import { useSelector } from 'react-redux';\n// import MessageBox from '../components/MessageBox';\n// let allUsers = [];\n// let allMessages = [];\n// let allSelectedUser = {};\n// const ENDPOINT =\n//   window.location.host.indexOf('localhost') >= 0\n//     ? 'http://127.0.0.1:5000'\n//     : window.location.host;\n// export default function SupportScreen() {\n//   const [selectedUser, setSelectedUser] = useState({});\n//   const [socket, setSocket] = useState(null);\n//   const uiMessagesRef = useRef(null);\n//   const [messageBody, setMessageBody] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const userSignin = useSelector((state) => state.userSignin);\n//   const { userInfo } = userSignin;\n//   useEffect(() => {\n//     if (uiMessagesRef.current) {\n//       uiMessagesRef.current.scrollBy({\n//         top: uiMessagesRef.current.clientHeight,\n//         left: 0,\n//         behavior: 'smooth',\n//       });\n//     }\n//     if (!socket) {\n//       const sk = socketIOClient(ENDPOINT);\n//       setSocket(sk);\n//       sk.emit('onLogin', {\n//         _id: userInfo._id,\n//         name: userInfo.name,\n//         // isAdmin: userInfo.isAdmin,\n//       });\n//       sk.on('message', (data) => {\n//         if (allSelectedUser._id === data._id) {\n//           allMessages = [...allMessages, data];\n//         } else {\n//           const existUser = allUsers.find((user) => user._id === data._id);\n//           if (existUser) {\n//             allUsers = allUsers.map((user) =>\n//               user._id === existUser._id ? { ...user, unread: true } : user\n//             );\n//             setUsers(allUsers);\n//           }\n//         }\n//         setMessages(allMessages);\n//       });\n//       sk.on('updateUser', (updatedUser) => {\n//         const existUser = allUsers.find((user) => user._id === updatedUser._id);\n//         if (existUser) {\n//           allUsers = allUsers.map((user) =>\n//             user._id === existUser._id ? updatedUser : user\n//           );\n//           setUsers(allUsers);\n//         } else {\n//           allUsers = [...allUsers, updatedUser];\n//           setUsers(allUsers);\n//         }\n//       });\n//       sk.on('listUsers', (updatedUsers) => {\n//         allUsers = updatedUsers;\n//         setUsers(allUsers);\n//       });\n//       sk.on('selectUser', (user) => {\n//         allMessages = user.messages;\n//         setMessages(allMessages);\n//       });\n//     }\n//   }, [messages, socket, users]);\n//   const selectUser = (user) => {\n//     allSelectedUser = user;\n//     setSelectedUser(allSelectedUser);\n//     const existUser = allUsers.find((x) => x._id === user._id);\n//     if (existUser) {\n//       allUsers = allUsers.map((x) =>\n//         x._id === existUser._id ? { ...x, unread: false } : x\n//       );\n//       setUsers(allUsers);\n//     }\n//     socket.emit('onUserSelected', user);\n//   };\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     if (!messageBody.trim()) {\n//       alert('Error. Please type message.');\n//     } else {\n//       allMessages = [\n//         ...allMessages,\n//         { body: messageBody, name: userInfo.name },\n//       ];\n//       setMessages(allMessages);\n//       setMessageBody('');\n//       setTimeout(() => {\n//         socket.emit('onMessage', {\n//           body: messageBody,\n//           name: userInfo.name,\n//           // isAdmin: userInfo.isAdmin,\n//           _id: selectedUser._id,\n//         });\n//       }, 1000);\n//     }\n//   };\n//   return (\n//     <div className=\"row top full-container\">\n//       <div className=\"col-1 support-users\">\n//         {users.filter((x) => x._id !== userInfo._id).length === 0 && (\n//           <MessageBox>No Online User Found</MessageBox>\n//         )}\n//         <ul>\n//           {users\n//             .filter((x) => x._id !== userInfo._id)\n//             .map((user) => (\n//               <li\n//                 key={user._id}\n//                 className={user._id === selectedUser._id ? '  selected' : '  '}\n//               >\n//                 <button\n//                   className=\"block\"\n//                   type=\"button\"\n//                   onClick={() => selectUser(user)}\n//                 >\n//                   {user.name}\n//                 </button>\n//                 <span\n//                   className={\n//                     user.unread ? 'unread' : user.online ? 'online' : 'offline'\n//                   }\n//                 />\n//               </li>\n//             ))}\n//         </ul>\n//       </div>\n//       <div className=\"col-3 support-messages\">\n//         {!selectedUser._id ? (\n//           <MessageBox>Select a user to start chat</MessageBox>\n//         ) : (\n//           <div>\n//             <div className=\"row\">\n//               <strong>Chat with {selectedUser.name} </strong>\n//             </div>\n//             <ul ref={uiMessagesRef}>\n//               {messages.length === 0 && <li>No message.</li>}\n//               {messages.map((msg, index) => (\n//                 <li key={index}>\n//                   <strong>{`${msg.name}: `}</strong> {msg.body}\n//                 </li>\n//               ))}\n//             </ul>\n//             <div>\n//               <form onSubmit={submitHandler} className=\"row\">\n//                 <input\n//                   value={messageBody}\n//                   onChange={(e) => setMessageBody(e.target.value)}\n//                   type=\"text\"\n//                   placeholder=\"type message\"\n//                 />\n//                 <button type=\"submit\">Send</button>\n//               </form>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["D:/duantotnghiep/frontend/src/screens/SupportScreen.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import socketIOClient from 'socket.io-client';\n// import { useSelector } from 'react-redux';\n// import MessageBox from '../components/MessageBox';\n\n// let allUsers = [];\n// let allMessages = [];\n// let allSelectedUser = {};\n// const ENDPOINT =\n//   window.location.host.indexOf('localhost') >= 0\n//     ? 'http://127.0.0.1:5000'\n//     : window.location.host;\n\n// export default function SupportScreen() {\n//   const [selectedUser, setSelectedUser] = useState({});\n//   const [socket, setSocket] = useState(null);\n//   const uiMessagesRef = useRef(null);\n//   const [messageBody, setMessageBody] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const userSignin = useSelector((state) => state.userSignin);\n//   const { userInfo } = userSignin;\n\n//   useEffect(() => {\n//     if (uiMessagesRef.current) {\n//       uiMessagesRef.current.scrollBy({\n//         top: uiMessagesRef.current.clientHeight,\n//         left: 0,\n//         behavior: 'smooth',\n//       });\n//     }\n\n//     if (!socket) {\n//       const sk = socketIOClient(ENDPOINT);\n//       setSocket(sk);\n//       sk.emit('onLogin', {\n//         _id: userInfo._id,\n//         name: userInfo.name,\n//         // isAdmin: userInfo.isAdmin,\n//       });\n//       sk.on('message', (data) => {\n//         if (allSelectedUser._id === data._id) {\n//           allMessages = [...allMessages, data];\n//         } else {\n//           const existUser = allUsers.find((user) => user._id === data._id);\n//           if (existUser) {\n//             allUsers = allUsers.map((user) =>\n//               user._id === existUser._id ? { ...user, unread: true } : user\n//             );\n//             setUsers(allUsers);\n//           }\n//         }\n//         setMessages(allMessages);\n//       });\n//       sk.on('updateUser', (updatedUser) => {\n//         const existUser = allUsers.find((user) => user._id === updatedUser._id);\n//         if (existUser) {\n//           allUsers = allUsers.map((user) =>\n//             user._id === existUser._id ? updatedUser : user\n//           );\n//           setUsers(allUsers);\n//         } else {\n//           allUsers = [...allUsers, updatedUser];\n//           setUsers(allUsers);\n//         }\n//       });\n//       sk.on('listUsers', (updatedUsers) => {\n//         allUsers = updatedUsers;\n//         setUsers(allUsers);\n//       });\n//       sk.on('selectUser', (user) => {\n//         allMessages = user.messages;\n//         setMessages(allMessages);\n//       });\n//     }\n//   }, [messages, socket, users]);\n\n//   const selectUser = (user) => {\n//     allSelectedUser = user;\n//     setSelectedUser(allSelectedUser);\n//     const existUser = allUsers.find((x) => x._id === user._id);\n//     if (existUser) {\n//       allUsers = allUsers.map((x) =>\n//         x._id === existUser._id ? { ...x, unread: false } : x\n//       );\n//       setUsers(allUsers);\n//     }\n//     socket.emit('onUserSelected', user);\n//   };\n\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     if (!messageBody.trim()) {\n//       alert('Error. Please type message.');\n//     } else {\n//       allMessages = [\n//         ...allMessages,\n//         { body: messageBody, name: userInfo.name },\n//       ];\n//       setMessages(allMessages);\n//       setMessageBody('');\n//       setTimeout(() => {\n//         socket.emit('onMessage', {\n//           body: messageBody,\n//           name: userInfo.name,\n//           // isAdmin: userInfo.isAdmin,\n//           _id: selectedUser._id,\n//         });\n//       }, 1000);\n//     }\n//   };\n\n//   return (\n//     <div className=\"row top full-container\">\n//       <div className=\"col-1 support-users\">\n//         {users.filter((x) => x._id !== userInfo._id).length === 0 && (\n//           <MessageBox>No Online User Found</MessageBox>\n//         )}\n//         <ul>\n//           {users\n//             .filter((x) => x._id !== userInfo._id)\n//             .map((user) => (\n//               <li\n//                 key={user._id}\n//                 className={user._id === selectedUser._id ? '  selected' : '  '}\n//               >\n//                 <button\n//                   className=\"block\"\n//                   type=\"button\"\n//                   onClick={() => selectUser(user)}\n//                 >\n//                   {user.name}\n//                 </button>\n//                 <span\n//                   className={\n//                     user.unread ? 'unread' : user.online ? 'online' : 'offline'\n//                   }\n//                 />\n//               </li>\n//             ))}\n//         </ul>\n//       </div>\n//       <div className=\"col-3 support-messages\">\n//         {!selectedUser._id ? (\n//           <MessageBox>Select a user to start chat</MessageBox>\n//         ) : (\n//           <div>\n//             <div className=\"row\">\n//               <strong>Chat with {selectedUser.name} </strong>\n//             </div>\n//             <ul ref={uiMessagesRef}>\n//               {messages.length === 0 && <li>No message.</li>}\n//               {messages.map((msg, index) => (\n//                 <li key={index}>\n//                   <strong>{`${msg.name}: `}</strong> {msg.body}\n//                 </li>\n//               ))}\n//             </ul>\n//             <div>\n//               <form onSubmit={submitHandler} className=\"row\">\n//                 <input\n//                   value={messageBody}\n//                   onChange={(e) => setMessageBody(e.target.value)}\n//                   type=\"text\"\n//                   placeholder=\"type message\"\n//                 />\n//                 <button type=\"submit\">Send</button>\n//               </form>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}