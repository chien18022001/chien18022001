{"ast":null,"code":"var _jsxFileName = \"D:\\\\duantotnghiep\\\\frontend\\\\src\\\\screens\\\\SupportScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox';\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\nexport default function SupportScreen() {\n  const [selectedUser, setSelectedUser] = useState({});\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null);\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const userSignin = useSelector(state => state.userSignin);\n  const {\n    userInfo\n  } = userSignin;\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    if (!socket) {\n      const sk = socketIOClient(ENDPOINT);\n      setSocket(sk);\n      sk.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name // isAdmin: userInfo.isAdmin,\n\n      });\n      sk.on('message', data => {\n        if (allSelectedUser._id === data._id) {\n          allMessages = [...allMessages, data];\n        } else {\n          const existUser = allUsers.find(user => user._id === data._id);\n\n          if (existUser) {\n            allUsers = allUsers.map(user => user._id === existUser._id ? { ...user,\n              unread: true\n            } : user);\n            setUsers(allUsers);\n          }\n        }\n\n        setMessages(allMessages);\n      });\n      sk.on('updateUser', updatedUser => {\n        const existUser = allUsers.find(user => user._id === updatedUser._id);\n\n        if (existUser) {\n          allUsers = allUsers.map(user => user._id === existUser._id ? updatedUser : user);\n          setUsers(allUsers);\n        } else {\n          allUsers = [...allUsers, updatedUser];\n          setUsers(allUsers);\n        }\n      });\n      sk.on('listUsers', updatedUsers => {\n        allUsers = updatedUsers;\n        setUsers(allUsers);\n      });\n      sk.on('selectUser', user => {\n        allMessages = user.messages;\n        setMessages(allMessages);\n      });\n    }\n  }, [messages, socket, users]);\n\n  const selectUser = user => {\n    allSelectedUser = user;\n    setSelectedUser(allSelectedUser);\n    const existUser = allUsers.find(x => x._id === user._id);\n\n    if (existUser) {\n      allUsers = allUsers.map(x => x._id === existUser._id ? { ...x,\n        unread: false\n      } : x);\n      setUsers(allUsers);\n    }\n\n    socket.emit('onUserSelected', user);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      allMessages = [...allMessages, {\n        body: messageBody,\n        name: userInfo.name\n      }];\n      setMessages(allMessages);\n      setMessageBody('');\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          // isAdmin: userInfo.isAdmin,\n          _id: selectedUser._id\n        });\n      }, 1000);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row top full-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-1 support-users\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, users.filter(x => x._id !== userInfo._id).length === 0 && /*#__PURE__*/React.createElement(MessageBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"No Online User Found\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, users.filter(x => x._id !== userInfo._id).map(user => /*#__PURE__*/React.createElement(\"li\", {\n    key: user._id,\n    className: user._id === selectedUser._id ? '  selected' : '  ',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"block\",\n    type: \"button\",\n    onClick: () => selectUser(user),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, user.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: user.unread ? 'unread' : user.online ? 'online' : 'offline',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-3 support-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, !selectedUser._id ? /*#__PURE__*/React.createElement(MessageBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, \"Select a user to start chat\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, \"Chat with \", selectedUser.name, \" \")), /*#__PURE__*/React.createElement(\"ul\", {\n    ref: uiMessagesRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, messages.length === 0 && /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 41\n    }\n  }, \"No message.\"), messages.map((msg, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }\n  }, `${msg.name}: `), \" \", msg.body))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: messageBody,\n    onChange: e => setMessageBody(e.target.value),\n    type: \"text\",\n    placeholder: \"type message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, \"Send\"))))));\n}","map":{"version":3,"sources":["D:/duantotnghiep/frontend/src/screens/SupportScreen.js"],"names":["React","useEffect","useRef","useState","socketIOClient","useSelector","MessageBox","allUsers","allMessages","allSelectedUser","ENDPOINT","window","location","host","indexOf","SupportScreen","selectedUser","setSelectedUser","socket","setSocket","uiMessagesRef","messageBody","setMessageBody","messages","setMessages","users","setUsers","userSignin","state","userInfo","current","scrollBy","top","clientHeight","left","behavior","sk","emit","_id","name","on","data","existUser","find","user","map","unread","updatedUser","updatedUsers","selectUser","x","submitHandler","e","preventDefault","trim","alert","body","setTimeout","filter","length","online","msg","index","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { useSelector } from 'react-redux';\nimport MessageBox from '../components/MessageBox';\n\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT =\n  window.location.host.indexOf('localhost') >= 0\n    ? 'http://127.0.0.1:5000'\n    : window.location.host;\n\nexport default function SupportScreen() {\n  const [selectedUser, setSelectedUser] = useState({});\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null);\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const userSignin = useSelector((state) => state.userSignin);\n  const { userInfo } = userSignin;\n\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n\n    if (!socket) {\n      const sk = socketIOClient(ENDPOINT);\n      setSocket(sk);\n      sk.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        // isAdmin: userInfo.isAdmin,\n      });\n      sk.on('message', (data) => {\n        if (allSelectedUser._id === data._id) {\n          allMessages = [...allMessages, data];\n        } else {\n          const existUser = allUsers.find((user) => user._id === data._id);\n          if (existUser) {\n            allUsers = allUsers.map((user) =>\n              user._id === existUser._id ? { ...user, unread: true } : user\n            );\n            setUsers(allUsers);\n          }\n        }\n        setMessages(allMessages);\n      });\n      sk.on('updateUser', (updatedUser) => {\n        const existUser = allUsers.find((user) => user._id === updatedUser._id);\n        if (existUser) {\n          allUsers = allUsers.map((user) =>\n            user._id === existUser._id ? updatedUser : user\n          );\n          setUsers(allUsers);\n        } else {\n          allUsers = [...allUsers, updatedUser];\n          setUsers(allUsers);\n        }\n      });\n      sk.on('listUsers', (updatedUsers) => {\n        allUsers = updatedUsers;\n        setUsers(allUsers);\n      });\n      sk.on('selectUser', (user) => {\n        allMessages = user.messages;\n        setMessages(allMessages);\n      });\n    }\n  }, [messages, socket, users]);\n\n  const selectUser = (user) => {\n    allSelectedUser = user;\n    setSelectedUser(allSelectedUser);\n    const existUser = allUsers.find((x) => x._id === user._id);\n    if (existUser) {\n      allUsers = allUsers.map((x) =>\n        x._id === existUser._id ? { ...x, unread: false } : x\n      );\n      setUsers(allUsers);\n    }\n    socket.emit('onUserSelected', user);\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      allMessages = [\n        ...allMessages,\n        { body: messageBody, name: userInfo.name },\n      ];\n      setMessages(allMessages);\n      setMessageBody('');\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          // isAdmin: userInfo.isAdmin,\n          _id: selectedUser._id,\n        });\n      }, 1000);\n    }\n  };\n\n  return (\n    <div className=\"row top full-container\">\n      <div className=\"col-1 support-users\">\n        {users.filter((x) => x._id !== userInfo._id).length === 0 && (\n          <MessageBox>No Online User Found</MessageBox>\n        )}\n        <ul>\n          {users\n            .filter((x) => x._id !== userInfo._id)\n            .map((user) => (\n              <li\n                key={user._id}\n                className={user._id === selectedUser._id ? '  selected' : '  '}\n              >\n                <button\n                  className=\"block\"\n                  type=\"button\"\n                  onClick={() => selectUser(user)}\n                >\n                  {user.name}\n                </button>\n                <span\n                  className={\n                    user.unread ? 'unread' : user.online ? 'online' : 'offline'\n                  }\n                />\n              </li>\n            ))}\n        </ul>\n      </div>\n      <div className=\"col-3 support-messages\">\n        {!selectedUser._id ? (\n          <MessageBox>Select a user to start chat</MessageBox>\n        ) : (\n          <div>\n            <div className=\"row\">\n              <strong>Chat with {selectedUser.name} </strong>\n            </div>\n            <ul ref={uiMessagesRef}>\n              {messages.length === 0 && <li>No message.</li>}\n              {messages.map((msg, index) => (\n                <li key={index}>\n                  <strong>{`${msg.name}: `}</strong> {msg.body}\n                </li>\n              ))}\n            </ul>\n            <div>\n              <form onSubmit={submitHandler} className=\"row\">\n                <input\n                  value={messageBody}\n                  onChange={(e) => setMessageBody(e.target.value)}\n                  type=\"text\"\n                  placeholder=\"type message\"\n                />\n                <button type=\"submit\">Send</button>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}